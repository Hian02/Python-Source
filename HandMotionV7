import mediapipe as mp
import cv2

mp_drawing = mp.solutions.drawing_utils
mp_hands = mp.solutions.hands

# 손의 동작을 감지하는 함수
def detect_hand_gesture(landmarks_list, image_width, image_height):
    hand_x = landmarks_list[9].x * image_width
    hand_y = landmarks_list[9].y * image_height
    
    # 손 위치 기반 동작 감지
    if hand_y < 0.3 * image_height:
        return "GO UP"
    elif hand_y > 0.7 * image_height:
        return "GO DOWN"
    elif hand_x < 0.3 * image_width:
        return "GO LEFT"
    elif hand_x > 0.7 * image_width:
        return "GO RIGHT"
    else:
        return "STOP"

# 비디오 캡처 객체 생성
capture = cv2.VideoCapture(0)
capture.set(3, 1280)
capture.set(4, 720)

# Mediapipe 손 추적 모델 로드
with mp_hands.Hands(min_detection_confidence=0.8, min_tracking_confidence=0.5) as hands:
    while capture.isOpened():
        # 비디오 프레임 읽기
        ret, frame = capture.read()
        frame = cv2.flip(frame, 1)
        image_height, image_width, _ = frame.shape
        detected_image = hands.process(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        
        if detected_image.multi_hand_landmarks:
            for hand_landmarks, handedness in zip(detected_image.multi_hand_landmarks, detected_image.multi_handedness):
                # 손의 랜드마크와 연결을 그립니다.
                mp_drawing.draw_landmarks(frame, hand_landmarks,
                                           mp_hands.HAND_CONNECTIONS,
                                           landmark_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(
                                               color=(255, 0, 255), thickness=4, circle_radius=2),
                                           connection_drawing_spec=mp.solutions.drawing_utils.DrawingSpec(
                                               color=(20, 180, 90), thickness=2, circle_radius=2)
                                           )
                
                # 손동작 감지
                landmarks_list = hand_landmarks.landmark
                hand_gesture = detect_hand_gesture(landmarks_list, image_width, image_height)
                
                # 손동작 표시
                hand_x = int(landmarks_list[9].x * image_width)
                hand_y = int(landmarks_list[9].y * image_height)
                cv2.putText(frame, hand_gesture, (hand_x, hand_y), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
                
                # 손의 라벨 표시
                hand_label = handedness.classification[0].label
                cv2.putText(frame, hand_label, (hand_x, hand_y - 50), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)
        
        # 화면에 보여주기
        cv2.imshow('Webcam', cv2.cvtColor(frame, cv2.COLOR_RGB2BGR))
        
        # 'q' 키를 누르면 종료
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

# 비디오 캡처 해제
capture.release()
cv2.destroyAllWindows()
